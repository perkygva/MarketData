lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red, lty=3, lwd=5)
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red, lty=3, lwd=5)
plot(u.data$px_last), #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
plot(u.data$px_last) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
plot(u.data$px_last, xlim = c(0,100)) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
plot(u.data$px_last, xlim = c(350,500)) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
plot(u.data$px_last) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
plot(u.data$px_last, xlim = c(2500, 3500)) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
pred = predict(ar1, n.ahead = 100)
plot(u.data$px_last, xlim = c(2500, 3500)) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
f = "px_last"
u = "kc2 comdty"
sd = as.Date("01-01-2004", "%d-%m-%Y")
con = blpConnect()
kc = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
ar1 = arima(kc$px_last, order = c(1, 0, 0))
ar11 = arima(kc$px_last, order = c(1, 1, 0), include.mean = T)
ar2 = arima(kc$px_last, order = c(2, 0, 0), include.mean = T)
dkc <- diff(kc$px_last)
plot(dkc)
ad.test(dkc)
adf.test(dkc)
acf(dkc)
acf(kc$px_last)
pacf(dkc)
tsdiag(ar1)
forecast(ar1, 3)
forecast(ar1, 30)
?forecast
plot(forecast(ar1, 30))
plot(forecast.arima(ar1, 30))
plot(forecast.Arima(ar1, 30))
plot(forecast.Arima(ar1, 50))
plot(forecast(ar1, 50))
f = "px_last"
u = "kc2 comdty"
sd = as.Date("01-01-2010", "%d-%m-%Y")
con = blpConnect()
kc = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
ar1 = arima(kc$px_last, order = c(1, 0, 0))
ar11 = arima(kc$px_last, order = c(1, 1, 0), include.mean = T)
ar2 = arima(kc$px_last, order = c(2, 0, 0), include.mean = T)
dkc <- diff(kc$px_last)
plot(dkc)
adf.test(dkc)
pacf(kc$px_last)
acf(dkc)
acf(kc$px_last)
tsdiag(ar1)
pred = predict(ar1, n.ahead = 100)
pacf(dkc)
plot(kc$px_last, xlim = c(2500, 3500)) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
plot(forecast(ar1, 50))
accuracy(pred)
accuracy(fcst)
fcst = forecast(ar1, 50))
accuracy(fcst)
accuracy(ar1)
accuracy(ar1)
accuracy(ar11)
accuracy(ar2)
fcst = forecast(ar1, 50))
fcst = forecast(ar1, 50)
plot(fcst)
plot(fcst, xlim = c(1500, 2000))
fcst = forecast(ar1, -50)
fcst = forecast(ar1[1500:1700], 50)
lines(fcst$model)
plot(fcst$fitted, xlim = c(1500, 2000))
lines(fcst$model)
plot(fcst$fitted)
lines(fcst$model)
lines(fcst$lower)
lines(fcst$x)
plot(kc)
plot(kc, type = "l")
lines(fcst$fitted, col = "red")
lines(fcst$fitted, col = "red")
plot(fcst$fitted, col = "red")
lines(fcst$fitted-fcst$residuals)
df = data.frame(kc = kc, ,fcst = fcst$fitted, res = fcst$residuals)
df = data.frame(kc,,fcst = fcst$fitted, res = fcst$residuals)
df = data.frame(kc,fcst = fcst$fitted, res = fcst$residuals)
df
df(order[-date,])
df(order[-df$date,])
head(df)
df[order(-date),]
df[order(date),]
df[order(df$date),]
df[order(-df$date),]
df[order(df$date, descending = T),]
df[order(df$date, decreasing = T),]
head(df[order(df$date, decreasing = T),])
fcst = forecast(ar1, 50)
fcst
head(fcst)
fcst
pred = predict(ar1, n.ahead = 5)
pred
fcst[1:10,]
fcst = forecast(ar1, 10)
fcst
?forecast
fcst = forecast(ar1, 10, robust = F)
tsdiag(ar1)
tsdiag(dkc)
tsdiag(arima(dkc, ar=1)
tsdiag(arima(dkc, ar=1))
tsdiag(arima(dkc, order=c(1,0,0))
tsdiag(arima(dkc, order=c(1,0,0)))
tsdiag(arima(dkc, order=c(1,0,0)))
head(df)
fcst$level
fcst$model
fcst$x
fcst$residuals
plot(fcst$residuals)
ar1 = auto.arima(kc$px_last)
f = "px_last"
u = "kc2 comdty"
sd = as.Date("01-01-2010", "%d-%m-%Y")
con = blpConnect()
library(caret)
source('G:/GENEVA/Code/R/Allan/Fun/Load.R')
library(caret)
f = "px_last"
u = "kc2 comdty"
sd = as.Date("01-01-2010", "%d-%m-%Y")
con = blpConnect()
kc = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
ar1 = auto.arima(kc$px_last)
ar11 = arima(kc$px_last, order = c(1, 1, 0), include.mean = T)
ar2 = arima(kc$px_last, order = c(2, 0, 0), include.mean = T)
accuracy(ar1)
accuracy(ar11)
accuracy(ar2)
dkc <- diff(kc$px_last)
plot(dkc)
adf.test(dkc)
acf(kc$px_last)
acf(dkc)
pacf(kc$px_last)
pacf(dkc)
tsdiag(ar1)
tsdiag(arima(dkc, order=c(1,0,0)))
pred = predict(ar1, n.ahead = 5)
plot(kc$px_last, xlim = c(2500, 3500)) #xlim = c(as.Date('2016-01-01'), as.Date('2017-01-01')))
lines(pred$pred, col="blue", lwd = 5)
lines(pred$pred + 2*pred$se, col = "red", lty=3, lwd = 5)
lines(pred$pred -2*pred$se, col = "red", lty=3, lwd=5)
fcst = forecast(ar1, 10)
df = data.frame(kc,fcst = fcst$fitted, res = fcst$residuals)
plot(kc, type = "l")
plot(fcst$fitted, col = "red")
lines(fcst$fitted-fcst$residuals)
plotforecast
auto.arima(dkc)
ar1 = auto.arima(kc$px_last)
ar1 = auto.arima(kc$px_last)
r1
ar1
aar = auto.arima(dkc)
tsdiag(aar)
df = data.frame(kc,fcst = fcst$fitted, res = fcst$residuals)
forecast(aar)
forecast(aar, 10)
library(tseries)
?drift
?ur.df
install.packages(urca)
install.packages("urca")
library(urca)
?ur.df
?drift
u = c("c 2 comdty", "w 2 comdty")
data = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
source('G:/GENEVA/Code/R/Allan/Fun/Load.R')
library(caret)
library(tseries)
install.packages("urca")
install.packages("urca")
source('G:/GENEVA/Code/R/Allan/Fun/Load.R')
library(caret)
library(urca)
install.packages("urca")
library(tseries)
f = "px_last"
u = c("c 2 comdty", "w 2 comdty")
sd = as.Date("01-01-2010", "%d-%m-%Y")
con = blpConnect()
data = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
install.packages("urca")
data
data = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
foreach (i = i:length(data%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
foreach (i = i:length(data)%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
foreach (i = i:length(data))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
foreach (i = i:length(data))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
library(foreach)
data = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
foreach (i = i:length(data))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
source('G:/GENEVA/Code/R/Allan/Fun/Load.R')
source("G:/Geneva/Code/R/Allan/Fun/bloomberg.R")
prod1 <- c("S", "C", "W")
prod2 <- c("KW", "CT", "KC", "DF", "CC", "QC")
contracts <- c("H", "K", "N", "U", "Z")
fields <- c("open_int", "fut_aggte_open_int", "aggregate_call_open_int", "aggregate_put_open_int")
blpConnect()
bbg = bloomy(paste0(prod1, " A Comdty"), fields)
names(bbg) = c("S", "C", "W")
blpDisconnect()
foreach (i = i:length(bbg))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
ggplot(bbg$S, aes(date, fut_aggte_open_int))+geom_line()+ geom_line(aes(bbg$C$fut_aggte_open_int), col = "red")
foreach (i = i:length(data))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
foreach(i = i:length(data))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
source('G:/GENEVA/Code/R/Allan/Fun/listconverter.R', echo=TRUE)
convertListToDT(data)
f = "PX_LAST"
data = bdh(u, f, start.date = sd, end.date = Sys.Date(), include.non.trading.days = F)
convertListToDT(data)
ggplot(data, aes(y = c.2.comdty, x = date), col = "red") +geom_line()
df = convertListToDT(data)
ggplot(df, aes(y = c.2.comdty, x = date), col = "red") +geom_line()
ggplot(df, aes(y = c.2.comdty, x = date, col = "red") +geom_line()+ geom_line(aes(y=w.2.comdty, col = "blue"))
ggplot(df, aes(y = c.2.comdty, x = date, col = "red") +geom_line()+ geom_line(aes(y=w.2.comdty, col = "blue"))
ggplot(df, aes(y = c.2.comdty, x = date, col = "red")) +geom_line()+ geom_line(aes(y=w.2.comdty, col = "blue"))
adf.test(df)
?adf.test
df2 = c(df$date, df$c.2.comdty-df$w.2.comdty)
df2
df2 = cbind(df$date, df$c.2.comdty-df$w.2.comdty)
df2
adf.test(df2)
fit = lm(c.2.comdty~w.2.comdty, df2)
class(df2)
df2 = data.frame(df$date, df$c.2.comdty-df$w.2.comdty)
fit = lm(c.2.comdty~w.2.comdty, df2)
fit = lm(c.2.comdty~w.2.comdty, df)
fit
anova(fit)
adf.test(df2)
adf.test(df2$df.c.2.comdty...df.w.2.comdty)
df2 = data.frame(df$date, CWarb = df$c.2.comdty-df$w.2.comdty)
fit = lm(c.2.comdty~w.2.comdty, df)
adf.test(df2$df.c.2.comdty...df.w.2.comdty)
adf.test(df2$CWarb)
scale(df2)
scale(df2$CWarb)
scale(df2$CWarb,c enter = T, scale = F)
scale(df2$CWarb,center = T, scale = F)
scale(df2$CWarb,center = T, scale = T)
scaled.cwarb = scale(df2$CWarb,center = T, scale = T)
zsc.cwarb = (scaled.cwarb-mean(scaled.cwarb))/sd(scaled.cwarb)
zsc.cwarb
plot(scaled.cwarb)
lines(zsc.cwarb)
lines(zsc.cwarb, col = "red")
zsc.cwarb = scale(df2$CWarb,center = T, scale = T)
plot(scaled.cwarb)
lines(zsc.cwarb, col = "red")
scaled.cwarb = scale(df2$CWarb,center = T, scale = F)
zsc.cwarb = scale(df2$CWarb,center = T, scale = T)
plot(scaled.cwarb)
lines(zsc.cwarb, col = "red")
lines(scaled.cward+zsc.cwarb, col = "red")
lines(scaled.cwarb+zsc.cwarb, col = "red")
lines(2*zsc.cwarb, col = "red")
lines(2*abs(zsc.cwarb), col = "red")
scaled.cwarb
?scaled
?scale
centered.cwarb = scale(df2$CWarb, center = T, scale = F)
zsc.cwarb = scale(df2$CWarb,center = T, scale = T)
df3 = data.frame(cr = centered.cwarb, zsc = zsc.cwarb)
df3
pp.test(df2$CWarb)
po.test(cbind(2*df$c.2.comdty, -1*df$w.2.comdty))
po.test(cbind(2*df$w.2.comdty, -1.0*df$c.2.comdty))
y = df2
y.lag = lag(y, 1)
y.lag
y = df2$CWarb
y.lag = lag(y, 1)
delta.y = diff(y)
df.cw = cbind(y, y.lag, delta.y)
y.lag = lag(y, -1)
delta.y = diff(y)
df.cw = cbind(y, y.lag, delta.y)
y = df2$CWarb
y.lag = lag(y, -1)
delta.y = diff(y)
y = df2$CWarb
y.lag = lag(y, -1)
y.lag = lag(y, -1)
?lag
y = df2$CWarb
y.lag = lag(y, -1)
delta.y = diff(y)
y
y.lag = stats::lag(y, -1)
delta.y = diff(y)
df.cw = cbind(y, y.lag, delta.y)
y.lag
df.cw = cbind(y, y.lag, delta.y)
y.lag = lag(y, 1L)
delta.y = diff(y)
df.cw = cbind(y, y.lag, delta.y)
lapply(y, y.lag, delta.y, nrow)
lapply(c(y, y.lag, delta.y),nrow)
nrow(y)
sapply(c(y, y.lag, delta.y), length)
length(y)
length(y.lag)
length(delta.y)
df.cw = cbind(y, y.lag, c(delta.y, NA)
df.cw = cbind(y, y.lag, c(delta.y, NA))
df.cw = cbind(y, y.lag, c(delta.y, NA))
df.cw
head(df.cw)
?cbind
df.cw = cbind(df2$date, y, y.lag, delta.y)
df.cw = cbind(df2$date, y, y.lag, c(delta.y, c))
df.cw = cbind(df2$date, y, y.lag, c(delta.y, NA))
df.cw
df.cw = cbind(df2$date, y, y.lag, c(delta.y, NA))
df.cw
df.cw = data.frame(df2$date, y, y.lag, c(delta.y, NA))
df.cw = data.frame(df2$date, y, y.lag, delta.y)
df.cw = data.frame(cbind(df2$date, y, y.lag, c(delta.y, NA)
df.cw = data.frame(cbind(df2$date, y, y.lag, c(delta.y, NA)
)
df.cw = data.frame(cbind(df2$date, y, y.lag, c(delta.y, NA)))
df.cw
df.cw = data.frame(df2, y.lag, c(delta.y, NA)))
df.cw = data.frame(df2, y.lag, c(delta.y, NA))
df.cw
regress.results = lm(delta.y~y.lag, df.cw)
regress.results = lm(delta.y~y.lag, df.cw[-1,])
lambda = summary(regress.results)$coefficients[2]
half.life = log(2)/lambda
half.life
regress.results
lambda
half.life
y = kc$px_last
y.lag = lag(y, 1L)
delta.y = diff(y)
df.kc = data.frame(y, y.lag, c(delta.y, NA))
df.kc = data.frame(kc, y.lag, c(delta.y, NA))
regress.results = lm(delta.y~y.lag, df.cw[-1,])
regress.results = lm(delta.y~y.lag, df.kc[-1,])
lambda = summary(regress.results)$coefficients[2]
half.life = log(2)/lambda
regress.results
lambda
half.life
pp.test(df$kc)
adf.test(df$kc)
adf.test(kc$px_last)
pp.test(kc$px_last)
adf.test(dkc$px_last)
adf.test(dkc)
pp.test(dkc)
tsdiag(ar1)
half.life = -log(2)/lambda
half.life
lambda
regress.results = lm(delta.y~y.lag, df.cw[-1,])
lambda = summary(regress.results)$coefficients[2]
half.life = log(2)/lambda
df.cw = data.frame(df2, y.lag, c(delta.y, NA))
regress.results = lm(delta.y~y.lag, df.cw[-1,])
lambda = summary(regress.results)$coefficients[2]
y = df2$CWarb
y.lag = lag(y, 1L)
delta.y = diff(y)
df.cw = data.frame(df2, y.lag, c(delta.y, NA))
regress.results = lm(delta.y~y.lag, df.cw[-1,])
lambda = summary(regress.results)$coefficients[2]
lambda
scatterplotMatrix(data)
scatterplotMatrix(df2)
scatterplotMatrix(df)
scatterplotMatrix(df[2:3,])
scatterplotMatrix(df[,2:3])
scatterplotMatrix(df[,2:3])
scatterplotMatrix(df[,2:3])
scatterplotMatrix(df)
?scatterplotMatrix
scatterplotMatrix(~c.2.comdty+w.2.comdty, data = df, spread = F)
scatterplotMatrix(~c.2.comdty+w.2.comdty, data = df, spread = T)
scatterplotMatrix(~c.2.comdty+w.2.comdty, data = df, spread = T, smoother.args = list(lty=2))
?scatterplotMatrix
half.life
y = df2$CWarb
y.lag = lag(y, 1L)
delta.y = diff(y)
df.cw = data.frame(df2, y.lag, c(delta.y, NA))
regress.results = lm(delta.y~y.lag, df.cw[-1,])
lambda = summary(regress.results)$coefficients[2]
half.life = log(2)/lambda
half.life
source('G:/GENEVA/Code/R/Allan/Market/MarketData/MeanReversion.R', echo=TRUE)
source('G:/GENEVA/Code/R/Allan/Fun/Load.R')
source("G:/Geneva/Code/R/Allan/Fun/bloomberg.R")
prod1 <- c("S", "C", "W")
prod2 <- c("KW", "CT", "KC", "DF", "CC", "QC")
contracts <- c("H", "K", "N", "U", "Z")
fields <- c("open_int", "fut_aggte_open_int", "aggregate_call_open_int", "aggregate_put_open_int")
blpConnect()
bbg = bloomy(paste0(prod1, " A Comdty"), fields)
names(bbg) = c("S", "C", "W")
blpDisconnect()
foreach (i = i:length(bbg))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
source('G:/GENEVA/Code/R/Allan/Fun/Load.R')
prod1 <- c("S", "C", "W")
prod2 <- c("KW", "CT", "KC", "DF", "CC", "QC")
contracts <- c("H", "K", "N", "U", "Z")
fields <- c("open_int", "fut_aggte_open_int", "aggregate_call_open_int", "aggregate_put_open_int")
blpConnect()
bbg = bloomy(paste0(prod1, " A Comdty"), fields)
names(bbg) = c("S", "C", "W")
blpDisconnect()
con = blpConnect()
bbg = bloomy(paste0(prod1, " A Comdty"), fields)
bbg = bloomy(paste0(prod1, " A Comdty")
bbg = bloomy(paste0(prod1, " A Comdty"))
names(bbg) = c("S", "C", "W")
bbg = bloomy(paste0(prod1, " A Comdty"))
blpDisconnect()
foreach (i = i:length(bbg))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
blpDisconnect(con)
foreach (i = i:length(bbg))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
foreach(i %in% i:length(bbg))%do%{
df <- data.frame(list[[i]])
setkey(df, date)
setnames(df, colnames)
}
library(mgcv)
?gam
?inner_join
file.exists("~/.ssh/id_rsa.pub")
